{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","titleValid","descriptionValid","imgUrlValid","imdbUrlValid","imdbIdValid","handleChange","e","target","name","value","setState","onAdd","newMovie","props","addMovie","clear","toValidate","match","this","formIsValid","onSubmit","preventDefault","type","placeholder","classnames","warning","onChange","onBlur","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52295591.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\nimport classnames from 'classnames';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    titleValid: true,\n    descriptionValid: true,\n    imgUrlValid: true,\n    imdbUrlValid: true,\n    imdbIdValid: true,\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  onAdd = () => {\n    const { title, description, imgUrl, imdbUrl, imdbId } = this.state;\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    this.props.addMovie(newMovie);\n    this.clear();\n  }\n\n  toValidate = (e) => {\n    const { name, value } = e.target;\n    // eslint-disable-next-line max-len\n    const regExp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    switch (name) {\n      case 'title':\n      case 'description':\n      case 'imdbId':\n        this.setState({\n          [`${name}Valid`]: !!value,\n        });\n        break;\n\n      case 'imgUrl':\n      case 'imdbUrl':\n        this.setState({\n          [`${name}Valid`]: !!value.match(regExp)\n          ,\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  clear = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  }\n\n  render() {\n    const { title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      titleValid,\n      descriptionValid,\n      imgUrlValid,\n      imdbUrlValid,\n      imdbIdValid } = this.state;\n\n    const formIsValid = !title\n    || !description\n    || !imgUrl\n    || !imdbUrl\n    || !imdbId;\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"header\">Add new movie</h1>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            this.onAdd();\n          }}\n        >\n          <div className=\"inputBlock\">\n            <p>Title: </p>\n            <input\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Add a title\"\n              className={classnames({\n                warning: !titleValid,\n              })}\n              value={title}\n              onChange={this.handleChange}\n              onBlur={this.toValidate}\n            />\n            {!titleValid\n            && <p className=\"error\">The title is not valid</p>}\n          </div>\n\n          <div className=\"inputBlock\">\n            <p>Description: </p>\n            <input\n              type=\"text\"\n              name=\"description\"\n              placeholder=\"Add a description\"\n              className={classnames({\n                warning: !descriptionValid,\n              })}\n              value={description}\n              onChange={this.handleChange}\n              onBlur={this.toValidate}\n            />\n            {!descriptionValid\n            && <p className=\"error\">The description is not valid</p>}\n          </div>\n\n          <div className=\"inputBlock\">\n            <p>Image url: </p>\n            <input\n              type=\"text\"\n              name=\"imgUrl\"\n              placeholder=\"Add image url\"\n              className={classnames({\n                warning: !imgUrlValid,\n              })}\n              value={imgUrl}\n              onChange={this.handleChange}\n              onBlur={this.toValidate}\n            />\n            {!imgUrlValid\n            && <p className=\"error\">The link is not valid</p>}\n          </div>\n\n          <div className=\"inputBlock\">\n            <p>IMDb url: </p>\n            <input\n              type=\"text\"\n              name=\"imdbUrl\"\n              placeholder=\"Add IMDb url\"\n              className={classnames({\n                warning: !imdbUrlValid,\n              })}\n              value={imdbUrl}\n              onChange={this.handleChange}\n              onBlur={this.toValidate}\n            />\n            {!imdbUrlValid\n            && <p className=\"error\">The link is not valid</p>}\n          </div>\n\n          <div className=\"inputBlock\">\n            <p>IMDb id: </p>\n            <input\n              type=\"text\"\n              name=\"imdbId\"\n              placeholder=\"Add IMDb id\"\n              className={classnames({\n                warning: !imdbIdValid,\n              })}\n              value={imdbId}\n              onChange={this.handleChange}\n              onBlur={this.toValidate}\n            />\n            {!imdbIdValid\n            && <p className=\"error\">The id is not valid</p>}\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"addMovieBtn\"\n            disabled={formIsValid}\n          >\n            Add new movie\n          </button>\n        </form>\n      </div>\n\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }\n    ));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            addMovie={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}